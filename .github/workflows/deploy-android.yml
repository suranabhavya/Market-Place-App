# GitHub Actions Workflow for Android App Deployment to Google Play Store
# This workflow automatically builds, signs, and deploys the Android app when code is pushed to main branch

name: 🚀 Deploy Android App to Play Store

# When should this workflow run?
# - Push to main branch (production releases)
# - Manual trigger via GitHub UI (for emergency releases)
on:
  push:
    branches: [ main, master ]
    # Only run if these paths change (optimization)
    paths:
      - 'lib/**'
      - 'android/**'
      - 'pubspec.yaml'
      - '.github/workflows/deploy-android.yml'
  
  # Allow manual triggering from GitHub Actions tab
  workflow_dispatch:
    inputs:
      release_notes:
        description: 'Release notes for this deployment'
        required: false
        default: 'Bug fixes and performance improvements'

# Define environment variables that all jobs can access
env:
  FLUTTER_VERSION: '3.32.0'  # Current Flutter Version
  JAVA_VERSION: '17'        # Required for latest Android builds
  
jobs:
  # Job 1: Build and Deploy Android App
  deploy:
    name: 📱 Build & Deploy Android
    runs-on: ubuntu-latest
    
    # Grant necessary permissions for the workflow
    permissions:
      contents: write        # Required to push commits and create releases
      actions: read         # Required to read workflow status
      security-events: write # Required for security scanning
    
    steps:
    # Step 1: Get the source code
    - name: 📥 Checkout Repository
      uses: actions/checkout@v4
      with:
        # Fetch full history for proper version management
        fetch-depth: 0
        # Use the GITHUB_TOKEN for authentication
        token: ${{ secrets.GITHUB_TOKEN }}
    
    # Step 2: Set up Java Development Kit (required for Android builds)
    - name: ☕ Setup Java JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'zulu'
        java-version: ${{ env.JAVA_VERSION }}
        
    # Step 2.0: Setup Gradle (as backup)
    - name: 🔧 Setup Gradle
      uses: gradle/gradle-build-action@v3
      with:
        gradle-version: '8.8'
        cache-read-only: false
        
    # Step 2.1: Set Gradle wrapper permissions and validate
    - name: 🔧 Set Gradle Wrapper Permissions
      run: |
        echo "Setting Gradle wrapper permissions..."
        chmod +x android/gradlew
        ls -la android/gradlew
        
        # Ensure gradle wrapper jar exists and is valid
        if [ ! -f "android/gradle/wrapper/gradle-wrapper.jar" ]; then
          echo "❌ Gradle wrapper jar not found, regenerating..."
          cd android
          gradle wrapper --gradle-version=8.8
        fi
        
    # Step 2.2: Verify Java installation and Gradle setup
    - name: 🔍 Verify Java Installation and Gradle Setup
      run: |
        echo "Java version:"
        java -version
        echo "JAVA_HOME: $JAVA_HOME"
        echo "PATH: $PATH"
        
        # Verify Gradle wrapper files exist
        echo "Checking Gradle wrapper files..."
        ls -la android/gradle/wrapper/
        
        # Test Gradle wrapper
        echo "Testing Gradle wrapper..."
        cd android
        ./gradlew --version
        
    # Step 3: Install and configure Flutter
    - name: 🐦 Setup Flutter SDK
      uses: subosito/flutter-action@v2
      with:
        flutter-version: ${{ env.FLUTTER_VERSION }}
        channel: 'stable'
        cache: true  # Cache Flutter for faster builds
        
    # Step 4: Verify Flutter installation
    - name: 🔍 Verify Flutter Installation
      run: |
        flutter --version
        flutter doctor -v
        
    # Step 5: Get Flutter dependencies
    - name: 📦 Get Flutter Dependencies
      run: flutter pub get
      
    # Step 6: Run code analysis (optional but recommended)
    - name: 🔍 Analyze Flutter Code
      run: flutter analyze --fatal-infos
      
    # Step 7: Run tests (optional but recommended)
    - name: 🧪 Run Flutter Tests
      run: flutter test
      continue-on-error: true  # Don't fail deployment if tests fail
      
    # Step 8: Create environment file for production
    - name: 🌍 Create Production Environment File
      run: |
        echo "Creating .env.production file..."
        cat > .env.production << EOF
        API_KEY=${{ secrets.API_KEY }}
        IOS_API_BASE_URL=${{ secrets.IOS_API_BASE_URL }}
        ANDROID_API_BASE_URL=${{ secrets.ANDROID_API_BASE_URL }}
        IOS_WS_BASE_URL=${{ secrets.IOS_WS_BASE_URL }}
        ANDROID_WS_BASE_URL=${{ secrets.ANDROID_WS_BASE_URL }}
        MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}
        FIREBASE_WEB_API_KEY=${{ secrets.FIREBASE_WEB_API_KEY }}
        FIREBASE_WEB_APP_ID=${{ secrets.FIREBASE_WEB_APP_ID }}
        FIREBASE_MESSAGING_SENDER_ID=${{ secrets.FIREBASE_MESSAGING_SENDER_ID }}
        FIREBASE_PROJECT_ID=${{ secrets.FIREBASE_PROJECT_ID }}
        GOOGLE_OAUTH_SERVER_CLIENT_ID=${{ secrets.GOOGLE_OAUTH_SERVER_CLIENT_ID }}
        GOOGLE_OAUTH_REDIRECT_SCHEME=${{ secrets.GOOGLE_OAUTH_REDIRECT_SCHEME }}
        ANDROID_KEYSTORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        ANDROID_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
        ANDROID_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}
        ANDROID_KEYSTORE_PATH=/home/runner/work/keystore.jks
        EOF
        
    # Step 9: Decode and setup Android keystore
    - name: 🔐 Setup Android Keystore
      run: |
        echo "Decoding keystore from base64..."
        echo "${{ secrets.ANDROID_KEYSTORE_BASE64 }}" | base64 -d > /home/runner/work/keystore.jks
        
        echo "Creating key.properties file..."
        cat > android/key.properties << EOF
        storePassword=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
        keyPassword=${{ secrets.ANDROID_KEY_PASSWORD }}
        keyAlias=${{ secrets.ANDROID_KEY_ALIAS }}
        storeFile=/home/runner/work/keystore.jks
        EOF
        
    # Step 10: Increment version number automatically
    - name: 📈 Auto-increment Version
      id: version
      run: |
        # Get current version from pubspec.yaml
        current_version=$(grep "version:" pubspec.yaml | cut -d' ' -f2)
        echo "Current version: $current_version"
        
        # Extract version name and build number
        version_name=$(echo $current_version | cut -d'+' -f1)
        build_number=$(echo $current_version | cut -d'+' -f2)
        
        # Generate a unique build number using timestamp to avoid conflicts
        # Format: YYYYMMDDHHMM (Year Month Day Hour Minute)
        timestamp_build=$(date -u +%Y%m%d%H%M)
        
        # Ensure the new build number is higher than the current one
        if [ "$timestamp_build" -le "$build_number" ]; then
          new_build_number=$((build_number + 1))
        else
          new_build_number=$timestamp_build
        fi
        
        new_version="${version_name}+${new_build_number}"
        
        echo "New version: $new_version (build: $new_build_number)"
        
        # Update pubspec.yaml
        sed -i "s/version: $current_version/version: $new_version/" pubspec.yaml
        
        # Output for later steps
        echo "version_name=$version_name" >> $GITHUB_OUTPUT
        echo "build_number=$new_build_number" >> $GITHUB_OUTPUT
        echo "full_version=$new_version" >> $GITHUB_OUTPUT
        
    # Step 11: Clean and prepare for build
    - name: 🧹 Clean Flutter Environment
      run: |
        echo "Cleaning Flutter caches..."
        flutter clean
        
    - name: 🧹 Clean Gradle Environment
      run: |
        echo "Cleaning Gradle caches..."
        cd android
        ./gradlew clean
        
    # Step 12: Build the Android App Bundle (AAB)
    - name: 🔨 Build Android App Bundle
      run: |
        echo "Building Android App Bundle for release..."
        flutter build appbundle --release \
          --dart-define-from-file=.env.production \
          --build-name=${{ steps.version.outputs.version_name }} \
          --build-number=${{ steps.version.outputs.build_number }}
          
    # Step 13: Setup Google Play Console API access
    - name: 🔑 Setup Google Play Console API
      run: |
        echo "Setting up Google Play Console service account..."
        echo '${{ secrets.GOOGLE_PLAY_SERVICE_ACCOUNT_JSON }}' > /tmp/service-account.json
        
    # Step 14: Create release notes directory
    - name: 📝 Create Release Notes
      run: |
        mkdir -p fastlane/metadata/android/en-US/changelogs
        echo "Version ${{ steps.version.outputs.full_version }}" > fastlane/metadata/android/en-US/changelogs/${{ steps.version.outputs.build_number }}.txt
        echo "" >> fastlane/metadata/android/en-US/changelogs/${{ steps.version.outputs.build_number }}.txt
        echo "${{ github.event.inputs.release_notes || 'Automated release with latest updates and improvements.' }}" >> fastlane/metadata/android/en-US/changelogs/${{ steps.version.outputs.build_number }}.txt
        echo "" >> fastlane/metadata/android/en-US/changelogs/${{ steps.version.outputs.build_number }}.txt
        echo "Changes in this release:" >> fastlane/metadata/android/en-US/changelogs/${{ steps.version.outputs.build_number }}.txt
        echo "${{ github.event.head_commit.message }}" >> fastlane/metadata/android/en-US/changelogs/${{ steps.version.outputs.build_number }}.txt
        
    # Step 15: Upload to Google Play Store
    - name: 🚀 Deploy to Google Play Store
      uses: r0adkll/upload-google-play@v1.1.3
      with:
        serviceAccountJson: /tmp/service-account.json
        packageName: com.surana.homiswap  # Your app's package name
        releaseFiles: build/app/outputs/bundle/release/app-release.aab
        track: internal  # Changed from production to internal for testing
        status: completed  # completed = immediate release, draft = manual release
        inAppUpdatePriority: 2
        whatsNewDirectory: fastlane/metadata/android/en-US/changelogs
          
    # Step 16: Commit version bump back to repository
    - name: 📝 Commit Version Bump
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Configure git with bot credentials
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are changes to commit
        if git diff --staged --quiet pubspec.yaml; then
          echo "No changes to pubspec.yaml, adding it..."
          git add pubspec.yaml
        fi
        
        # Commit if there are changes
        if ! git diff --staged --quiet; then
          git commit -m "🔖 Bump version to ${{ steps.version.outputs.full_version }} [skip ci]"
          
          # Set up authentication and push
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}
          git push origin HEAD:${{ github.ref_name }}
        else
          echo "No changes to commit"
        fi
        
    # Step 17: Create GitHub Release
    - name: 🏷️ Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.version.outputs.full_version }}
        release_name: Release v${{ steps.version.outputs.full_version }}
        body: |
          ## 🚀 Release v${{ steps.version.outputs.full_version }}
          
          **Deployed to Google Play Store:** ✅
          
          ### 📝 Release Notes
          ${{ github.event.inputs.release_notes || 'Automated release with latest updates and improvements.' }}
          
          ### 🔄 Changes
          ${{ github.event.head_commit.message }}
          
          ### 📱 Download
          - [Google Play Store](https://play.google.com/store/apps/details?id=com.surana.homiswap)
          
        draft: false
        prerelease: false
        
    # Step 18: Cleanup sensitive files
    - name: 🧹 Cleanup
      if: always()
      run: |
        rm -f /tmp/service-account.json
        rm -f /home/runner/work/keystore.jks
        rm -f android/key.properties
        rm -f .env.production 